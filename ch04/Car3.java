package ch04;

public class Car3 { // Car3 클래스를 공용으로 생성한다.
	// 필드 : 객체의 데이터가 저장되는 곳
	// 필드 선언은 클래스 {} 블록 어디서든 선언할 수 있다.
	// 생성자 선언과 메서드 선언의 앞과 뒤로 가능하나, 위쪽을 지향해야 한다. (생성자와 메소드 사이에서는 선언이 될 수 없다.)
	
	// 타입은 필드에 저장할 데이터의 종류를 결정한다. (기본타입, 참조타입)
	// 필드에 초기값은 선언시 주어질 수도 있고, 생략될 수도 있다.
	// 기본값이 지정되지 않는 필드들은 객체 생성시 자동으로 기본 초기값 (0, 0.0, null)으로 설정된다.
	
	// ===== 고유데이터 =====
	String company = "현대" ; // 제작 회사
	String model = "소나타" ; // 모델
	String color = "실버" ; // 색상
	int maxSpeed = 200 ; // 최고 속도
	int productionYear = 2022; // 생산년도
	int currentSpeed = 100; // 주행속도
	boolean engineStart = true; // 시동상태
	// ===== 상태 =====
	int speed ; // 현재 속도
	int rpm ; // 현재 엔진회전수
	
	// 생성자 : 객체 생성시 초기화 역할 담당, 클래스명과 동일해야 한다.
	// new 연산자에 의해 생성자가 성공적으로 실행되면 힙(heap) 영역에 객체가 생성되고 객체의 주소가 리턴된다.
	// 생성자에 에러가 발생하면 객체는 생성되지 않는다.
	
	// 모든 클래스에는 생성자가 반드시 존재하며, 하나 이상을 가질 수 있다.
	// 우리가 클래스 내부에 생성자 선언을 생략했다면 컴파일러는 중괄호 블럭으로 내용이 비어있는 기본 생성자를 바이트 코드에 자동으로 추가한다.
	// 그러나 클래스에 선언한 생성자가 한 개라도 있으면 컴파일러는 기본 생성자를 추가하지 않는다.
	// 생성자를 선언하는 이유 : 객체를 다양하게 초기화하기 위해서.
	
	// 생성자 선언 방법 -> Car3 myCar = new Car3();
	// 생성자 블록 내부에는 객체 초기화 코드가 작성된다. 일반적으로 필드에 초기값을 저장하거나 메소드를 호출하여 사용 전에 필요한 준비를 한다. 
	
	Car3(){ 
		speed = 0;
	}
		
	
	
	// 메소드 : 객체의 동작에 해당하는 실행 블록
	void methodName(){
		speed = 20;
		System.out.println("현재 속도 :" + speed);
	}

}
